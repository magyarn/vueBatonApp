import * as firebase from 'firebase'

export default {
  state: {
    user: null,
    userDetails: null
  },
  mutations: {
    registerUserForCompetition (state, payload) {
      const id = payload.id
      if (state.user.registeredCompetitions.findIndex(competition => competition.id === id) >= 0) {
        return 0
      }
      state.user.registeredCompetitions.push(id)
      // id = competitionID, fbKey = key generated by firebase
      state.user.fbKeys[id] = payload.fbKey
    },
    unregisterUserFromCompetition (state, payload) {
      const registeredCompetitions = state.user.registeredCompetitions
      registeredCompetitions.splice(registeredCompetitions.findIndex(competition => competition.id === payload), 1)
      Reflect.deleteProperty(state.user.fbKeys, payload)
    },
    setUser (state, payload) {
      state.user = payload
    },
    setUserDetails (state, payload) {
      state.userDetails = payload
    },
    updateUserProfileData (state, payload) {
      const user = state.user
      if (payload.firstName) {
        user.firstName = payload.firstName
      }
      if (payload.lastName) {
        user.lastName = payload.lastName
      }
      if (payload.hometown) {
        user.hometown = payload.hometown
      }
      if (payload.birthday) {
        user.birthday = payload.birthday
      }
      if (payload.profilePicUrl) {
        user.profilePicUrl = payload.profilePicUrl
      }
    }
  },
  actions: {
    registerUserForCompetition ({commit, getters}, payload) {
      commit('setLoading', true)
      const user = getters.user
      firebase.database().ref('/users/' + user.id).child('/registeredCompetitions/')
      .push(payload)
      .then(data => {
        commit('setLoading', false)
        commit('registerUserForCompetition', {id: payload, fbKey: data.key})
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    unregisterUserFromCompetition ({commit, getters}, payload) {
      commit('setLoading', true)
      const user = getters.user
      if (!user.fbKeys) {
        return
      }
      const fbKey = user.fbKeys[payload]
      firebase.database().ref('/users/' + user.id + '/registeredCompetitions/').child(fbKey)
      .remove()
      .then(() => {
        commit('setLoading', false)
        commit('unregisterUserFromCompetition', payload)
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    signUserUp ({commit, getters}, payload) {
      commit('setLoading', true)
      commit('clearError')
      firebase.auth().createUserWithEmailAndPassword(payload.email, payload.password)
      .then(
        user => {
          commit('setLoading', false)
          const newUser = {
            id: user.uid,
            registeredCompetitions: [],
            firstName: payload.firstName,
            lastName: payload.lastName,
            birthday: payload.birthday,
            fbKeys: {}
          }
          firebase.storage().ref('/users/').child('profilePicDefault.png').getDownloadURL()
          .then(url => {
            const finalNewUser = {
              ...newUser,
              profilePicUrl: url
            }
            console.log('ProfilePicUrl: ', finalNewUser.profilePicUrl)
            firebase.database().ref('/users/' + getters.user.id + '/userDetails/').push(finalNewUser)
            .catch(error => {
              console.log(error)
            })
            commit('setUser', finalNewUser)
          })
          .catch(error => {
            console.log(error)
            commit('setLoading', false)
          })
        }
      )
    },
    signUserIn ({commit}, payload) {
      commit('setLoading', true)
      commit('clearError')
      firebase.auth().signInWithEmailAndPassword(payload.email, payload.password)
      .then(
        user => {
          commit('setLoading', false)
          const returningUser = {
            id: user.uid,
            registeredCompetitions: [],
            firstName: user.firstName,
            lastName: user.lastName,
            birthday: user.birthday,
            hometown: user.hometown,
            profilePicUrl: user.profilePicUrl,
            fbKeys: {}
          }
          commit('setUser', returningUser)
        }
      )
      .catch(
        error => {
          commit('setLoading', false)
          commit('setError', error)
          console.log(error)
        }
      )
    },
    autoSignIn ({commit}, payload) {
      commit('setUser', {id: payload.uid,
        registeredCompetitions: [],
        fbKeys: {}
      })
    },
    fetchUserData ({commit, getters}) {
      commit('setLoading', true)
      const updatedUser = {}
      firebase.database().ref('/users/' + getters.user.id + '/registeredCompetitions/').once('value')
      .then(data => {
        const dataPairs = data.val()
        let registeredCompetitions = []
        let swappedPairs = {}
        for (let key in dataPairs) {
          registeredCompetitions.push(dataPairs[key])
          swappedPairs[dataPairs[key]] = key
        }
        updatedUser.id = getters.user.id
        updatedUser.registeredCompetitions = registeredCompetitions
        updatedUser.fbKeys = swappedPairs
      })
      .catch(error => {
        console.log(error)
      })
      firebase.database().ref('/users/' + getters.user.id + '/userDetails').once('value')
      .then(data => {
        const dataPairs = data.val()
        const fbUserKey = []
        for (let key in dataPairs) {
          fbUserKey.push(dataPairs[key])
        }
        let finalUser = {
          ...updatedUser,
          birthday: fbUserKey[0].birthday,
          firstName: fbUserKey[0].firstName,
          lastName: fbUserKey[0].lastName,
          hometown: fbUserKey[0].hometown,
          profilePicUrl: fbUserKey[0].profilePicUrl
        }
        commit('setLoading', false)
        commit('setUser', finalUser)
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    loadUserDetails ({commit, getters}) {
      commit('setLoading', true)
      firebase.database().ref('/users/' + getters.user.id + '/userDetails/').once('value')
      .then(data => {
        const details = data.val()
        const userDetailsKeys = []
        for (let key in details) {
          userDetailsKeys.push(key)
        }
        const userDetails = details[userDetailsKeys[0]]
        commit('setLoading', false)
        commit('setUserDetails', userDetails)
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    updateUserProfileData ({commit}, payload) {
      commit('setLoading', true)
      const updateObj = {}
      if (payload.firstName) {
        updateObj.firstName = payload.firstName
      }
      if (payload.lastName) {
        updateObj.lastName = payload.lastName
      }
      if (payload.hometown) {
        updateObj.hometown = payload.hometown
      }
      if (payload.birthday) {
        updateObj.birthday = payload.birthday
      }
      if (payload.profilePicUrl) {
        updateObj.profilePicUrl = payload.profilePicUrl
      }
      firebase.database().ref('users').child(`${payload.id}/userDetails`).once('value')
      .then(data => {
        const dataPairs = data.val()
        let detailKey = []
        for (let key in dataPairs) {
          detailKey.push(key)
        }
        firebase.database().ref('users').child(`${payload.id}/userDetails/${detailKey[0]}`).update(updateObj)
          .then(() => {
            commit('setLoading', false)
            commit('updateUserProfileData', payload)
          })
          .catch(error => {
            console.log(error)
            commit('setLoading', false)
          })
      })
      .catch(error => {
        console.log(error)
      })
    },
    logout ({commit}) {
      firebase.auth().signOut()
      commit('setUser', null)
    }
  },
  getters: {
    user (state) {
      return state.user
    },
    userDetails (state) {
      return state.userDetails
    },
    getRegisteredCompetitions (state) {
      return state.user.registeredCompetitions
    }
  }
}
