import Vue from 'vue'
import Vuex from 'vuex'
import * as firebase from 'firebase'

Vue.use(Vuex)

export const store = new Vuex.Store({
  state: {
    user: null,
    userDetails: null,
    loading: false,
    error: null
  },
  mutations: {
    registerUserForCompetition (state, payload) {
      const id = payload.id
      if (state.user.registeredCompetitions.findIndex(competition => competition.id === id) >= 0) {
        return 0
      }
      state.user.registeredCompetitions.push(id)
      // id = competitionID, fbKey = key generated by firebase
      state.user.fbKeys[id] = payload.fbKey
    },
    unregisterUserFromCompetition (state, payload) {
      const registeredCompetitions = state.user.registeredCompetitions
      registeredCompetitions.splice(registeredCompetitions.findIndex(competition => competition.id === payload), 1)
      Reflect.deleteProperty(state.user.fbKeys, payload)
    },
    setUser (state, payload) {
      state.user = payload
    },
    setUserDetails (state, payload) {
      state.userDetails = payload
    },
    setLoading (state, payload) {
      state.loading = payload
    },
    setError (state, payload) {
      state.error = payload
    },
    clearError (state) {
      state.error = null
    }
  },
  actions: {
    registerUserForCompetition ({commit, getters}, payload) {
      commit('setLoading', true)
      const user = getters.user
      firebase.database().ref('/users/' + user.id).child('/registeredCompetitions/')
      .push(payload)
      .then(data => {
        commit('setLoading', false)
        commit('registerUserForCompetition', {id: payload, fbKey: data.key})
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    unregisterUserFromCompetition ({commit, getters}, payload) {
      commit('setLoading', true)
      const user = getters.user
      if (!user.fbKeys) {
        return
      }
      const fbKey = user.fbKeys[payload]
      firebase.database().ref('/users/' + user.id + '/registeredCompetitions/').child(fbKey)
      .remove()
      .then(() => {
        commit('setLoading', false)
        commit('unregisterUserFromCompetition', payload)
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    signUserUp ({commit, getters}, payload) {
      commit('setLoading', true)
      commit('clearError')
      firebase.auth().createUserWithEmailAndPassword(payload.email, payload.password)
      .then(
        user => {
          commit('setLoading', false)
          const newUser = {
            id: user.uid,
            registeredCompetitions: [],
            firstName: '',
            lastName: payload.lastName,
            birthday: payload.birthday,
            fbKeys: {}
          }
          commit('setUser', newUser)
        }
      )
      .then(user => {
        firebase.database().ref('/users/' + getters.user.id + '/userDetails/').push({
          firstName: payload.firstName,
          lastName: payload.lastName,
          birthday: payload.birthday
        })
      }
      )
      .catch(
        error => {
          commit('setLoading', false)
          commit('setError', error)
          console.log(error)
        }
      )
    },
    signUserIn ({commit}, payload) {
      commit('setLoading', true)
      commit('clearError')
      firebase.auth().signInWithEmailAndPassword(payload.email, payload.password)
      .then(
        user => {
          commit('setLoading', false)
          const returningUser = {
            id: user.uid,
            registeredCompetitions: [],
            firstName: '',
            lastName: user.lastName,
            birthday: user.birthday,
            fbKeys: {}
          }
          commit('setUser', returningUser)
        }
      )
      .catch(
        error => {
          commit('setLoading', false)
          commit('setError', error)
          console.log(error)
        }
      )
    },
    clearError ({commit}) {
      commit('clearError')
    },
    autoSignIn ({commit}, payload) {
      commit('setUser', {id: payload.uid,
        registeredCompetitions: [],
        fbKeys: {}
      })
    },
    fetchUserData ({commit, getters}) {
      commit('setLoading', true)
      firebase.database().ref('/users/' + getters.user.id + '/registeredCompetitions/').once('value')
      .then(data => {
        const dataPairs = data.val()
        let registeredCompetitions = []
        let swappedPairs = {}
        for (let key in dataPairs) {
          registeredCompetitions.push(dataPairs[key])
          swappedPairs[dataPairs[key]] = key
        }
        const updatedUser = {
          id: getters.user.id,
          registeredCompetitions: registeredCompetitions,
          fbKeys: swappedPairs
        }
        commit('setLoading', false)
        commit('setUser', updatedUser)
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    // getRegisteredCompetitions ({commit, getters}) {
    //   commit('setLoading', true)
    //   const registeredCompetitions = getters.user.registeredCompetitions
    //   console.log('Comps', registeredCompetitions)
    //   registeredCompetitions.map(competition => {
    //     firebase.database().ref('/competitions/').once('value')
    //       .then(data => {
    //         const fbData = data.val()
    //         const compData = []
    //         for (let key in fbData) {
    //           if (key === competition) {
    //             compData.push(fbData[key])
    //           }
    //         }
    //         commit('setRegisteredCompetitionData', compData)
    //         commit('setLoading', false)
    //       })
    //       .catch(error => {
    //         console.log(error)
    //         commit('setLoading', false)
    //       })
    //   })
    // },
    loadUserDetails ({commit, getters}) {
      commit('setLoading', true)
      firebase.database().ref('/users/' + getters.user.id + '/userDetails/').once('value')
      .then(data => {
        const details = data.val()
        const userDetailsKeys = []
        for (let key in details) {
          userDetailsKeys.push(key)
        }
        const userDetails = details[userDetailsKeys[0]]
        commit('setLoading', false)
        commit('setUserDetails', userDetails)
      })
      .catch(error => {
        console.log(error)
        commit('setLoading', false)
      })
    },
    logout ({commit}) {
      firebase.auth().signOut()
      commit('setUser', null)
    }
  },
  getters: {
    user (state) {
      return state.user
    },
    userDetails (state) {
      return state.userDetails
    },
    getRegisteredCompetitions (state) {
      return state.user.registeredCompetitions
    },
    loading (state) {
      return state.loading
    },
    error (state) {
      return state.error
    }
  }
})
